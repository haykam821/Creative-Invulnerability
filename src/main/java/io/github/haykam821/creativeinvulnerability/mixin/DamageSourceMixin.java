package io.github.haykam821.creativeinvulnerability.mixin;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import io.github.haykam821.creativeinvulnerability.CreativeInvulnerabilityHolder;
import net.minecraft.entity.Entity;
import net.minecraft.entity.damage.DamageSource;

@Mixin(DamageSource.class)
public abstract class DamageSourceMixin {
	@Shadow
	public abstract Entity getAttacker();

	@Inject(method = "isSourceCreativePlayer", at = @At("HEAD"), cancellable = true)
	private void preventCreativePlayer(CallbackInfoReturnable<Boolean> ci) {
		CreativeInvulnerabilityHolder holder = CreativeInvulnerabilityHolder.ofNullable(this.getAttacker());
		if (holder != null && holder.shouldRespectCreativeInvulnerability()) {
			ci.setReturnValue(false);
		}
	}
}
