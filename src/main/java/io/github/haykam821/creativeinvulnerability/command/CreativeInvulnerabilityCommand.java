package io.github.haykam821.creativeinvulnerability.command;

import com.mojang.brigadier.Command;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;

import io.github.haykam821.creativeinvulnerability.CreativeInvulnerabilityHolder;
import io.github.haykam821.creativeinvulnerability.Main;
import net.minecraft.server.command.CommandManager;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.TranslatableText;

public final class CreativeInvulnerabilityCommand {
	private CreativeInvulnerabilityCommand() {
		return;
	}

	public static void register(CommandDispatcher<ServerCommandSource> dispatcher) {
		dispatcher.register(CommandManager.literal(Main.MOD_ID)
			.requires(source -> {
				return source.hasPermissionLevel(2);
			})
			.then(CommandManager.literal("on")
				.executes(CreativeInvulnerabilityCommand::executeOn))
			.then(CommandManager.literal("off")
				.executes(CreativeInvulnerabilityCommand::executeOff))
			.then(CommandManager.literal("toggle")
				.executes(CreativeInvulnerabilityCommand::executeToggle))
			.then(CommandManager.literal("query")
				.executes(CreativeInvulnerabilityCommand::executeQuery)));
	}
	
	private static int executeSet(String name, boolean value, CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
		ServerCommandSource source = context.getSource();
		CreativeInvulnerabilityHolder holder = CreativeInvulnerabilityHolder.ofSource(source);

		if (holder.shouldRespectCreativeInvulnerability() == value) {
			source.sendError(new TranslatableText("command.creativeinvulnerability." + name + ".already_" + name));
			return 0;
		} else {
			holder.setRespectCreativeInvulnerability(value);

			source.sendFeedback(new TranslatableText("command.creativeinvulnerability." + name + ".success"), true);
			return Command.SINGLE_SUCCESS;
		}
	}

	private static int executeOn(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
		return CreativeInvulnerabilityCommand.executeSet("on", true, context);
	}

	private static int executeOff(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
		return CreativeInvulnerabilityCommand.executeSet("off", false, context);
	}

	private static int executeToggle(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
		ServerCommandSource source = context.getSource();
		CreativeInvulnerabilityHolder holder = CreativeInvulnerabilityHolder.ofSource(source);

		boolean respectsCreativeInvulnerability = holder.shouldRespectCreativeInvulnerability();
		holder.setRespectCreativeInvulnerability(!respectsCreativeInvulnerability);

		if (respectsCreativeInvulnerability) {
			source.sendFeedback(new TranslatableText("command.creativeinvulnerability.off.success"), false);
		} else {
			source.sendFeedback(new TranslatableText("command.creativeinvulnerability.on.success"), false);
		}

		return Command.SINGLE_SUCCESS;
	}

	private static int executeQuery(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
		ServerCommandSource source = context.getSource();
		CreativeInvulnerabilityHolder holder = CreativeInvulnerabilityHolder.ofSource(source);

		if (holder.shouldRespectCreativeInvulnerability()) {
			source.sendFeedback(new TranslatableText("command.creativeinvulnerability.query.on"), false);
			return Command.SINGLE_SUCCESS;
		} else {
			source.sendFeedback(new TranslatableText("command.creativeinvulnerability.query.off"), false);
			return 0;
		}
	}
}
